#include<bits/stdc++.h>
using namespace std;

/*
Lower Bound --> for example if you find the 7 in the given array, then gives us a 7 if present
and if 7 is not present then it gives us a greater than 7. OR agar value present hai to vahi
value print krga nahi toh usse badi value.

Upper Bound --> In this if element if present then also it gives us a next element always whether
elmenent is present or not in the given array. Or ye hamesa element se badi value hi print krega
*/

int main()
{
    // int n;
    // cin>>n;
    // int arr[n];
    // for(int i=0;i<n;i++)
    // {
    //     cin>>arr[i];
    // }

// Sorting is mandatory here you have to do sort before finding the lower_Bound and Upper_bound.
    // sort(arr,arr+n);


    // int *ptr=lower_bound(arr,arr+n,28);
    // if(ptr==(arr+n))
    // {
    //     cout<<"NOT FOUND "<<endl;
    // }
    // else{
    // cout<<(*ptr)<<endl;
    // }

    //  int *ptr=upper_bound(arr,arr+n,6);
    // if(ptr==(arr+n))
    // {
    //     cout<<"NOT FOUND "<<endl;
    // }
    // else{
    // cout<<(*ptr)<<endl;
    // }

   // By using vectors
//    int n;
//    cin>>n;
//       vector<int>v(n);
//           for(int i=0;i<n;i++)
//     {
//         cin>>v[i];
//     }
//       sort(v.begin(),v.end());
//      auto it=upper_bound(v.begin(),v.end(),6);
//     if(it==(v.end()))
//     {
//         cout<<"NOT FOUND "<<endl;
//     }
//     else{
//     cout<<(*it)<<endl;
//     }



//    By using Sets

    int n;
    cin>>n;
    set<int>s;
    for(int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        s.insert(x);
    }

   // In set we don't have to sort because in set all elements are already present in sorted order


    // auto it=lower_bound(s.begin(),s.end(), 5); // It time complexity is O(n)
    auto it=s.upper_bound(5); // So, that why we use this to find the lower bound
    
    // auto it=s.lower_bound(5);
    cout<<(*it)<<endl;

    return 0;
}
